{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n// Define the initial state using that type\nconst initialState = {\n  value: 0\n};\nexport const counterSlice = createSlice({\n  name: 'counter',\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions; // Other code such as selectors can use the imported `RootState` type\n\nexport const selectCount = state => state.counter.value;\nexport default counterSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","value","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","selectCount","counter","reducer"],"sources":["C:/Users/pbitn/Desktop/learning/React/reactjs-ecommerce/src/stores/cart.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit'\r\nimport type { RootState } from './store'\r\n\r\n// Define a type for the slice state\r\ninterface CounterState {\r\n  value: number\r\n}\r\n\r\n// Define the initial state using that type\r\nconst initialState: CounterState = {\r\n  value: 0\r\n}\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  // `createSlice` will infer the state type from the `initialState` argument\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      state.value += 1\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload\r\n    }\r\n  }\r\n})\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\r\n\r\n// Other code such as selectors can use the imported `RootState` type\r\nexport const selectCount = (state: RootState) => state.counter.value\r\n\r\nexport default counterSlice.reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAQA;AACA,MAAMC,YAA0B,GAAG;EACjCC,KAAK,EAAE;AAD0B,CAAnC;AAIA,OAAO,MAAMC,YAAY,GAAGH,WAAW,CAAC;EACtCI,IAAI,EAAE,SADgC;EAEtC;EACAH,YAHsC;EAItCI,QAAQ,EAAE;IACRC,SAAS,EAAEC,KAAK,IAAI;MAClBA,KAAK,CAACL,KAAN,IAAe,CAAf;IACD,CAHO;IAIRM,SAAS,EAAED,KAAK,IAAI;MAClBA,KAAK,CAACL,KAAN,IAAe,CAAf;IACD,CANO;IAOR;IACAO,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAA0C;MAC3DH,KAAK,CAACL,KAAN,IAAeQ,MAAM,CAACC,OAAtB;IACD;EAVO;AAJ4B,CAAD,CAAhC;AAkBP,OAAO,MAAM;EAAEL,SAAF;EAAaE,SAAb;EAAwBC;AAAxB,IAA8CN,YAAY,CAACS,OAAjE,C,CAEP;;AACA,OAAO,MAAMC,WAAW,GAAIN,KAAD,IAAsBA,KAAK,CAACO,OAAN,CAAcZ,KAAxD;AAEP,eAAeC,YAAY,CAACY,OAA5B"},"metadata":{},"sourceType":"module"}