{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nexport const cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    cart: 0\n  },\n  reducers: {\n    inc: state => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.cart += 1;\n    },\n    removeFromCart: state => {\n      state.cart -= 1;\n    }\n  }\n});\nexport const {\n  inc,\n  removeFromCart\n} = cartSlice.actions; // The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\n\nexport const selectCart = state => state.cart.cart;\nexport default cartSlice.reducer;","map":{"version":3,"names":["createSlice","cartSlice","name","initialState","cart","reducers","inc","state","removeFromCart","actions","selectCart","reducer"],"sources":["C:/Users/pbitn/Desktop/learning/React/reactjs-ecommerce/src/stores/cartSlice.ts"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nexport const cartSlice = createSlice({\r\n  name: 'cart',\r\n  initialState: {\r\n    cart: 0,\r\n  },\r\n  reducers: {\r\n    inc: (state) => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.cart += 1\r\n    },\r\n    removeFromCart: (state) => {\r\n      state.cart -= 1\r\n    },\r\n  },\r\n})\r\n\r\nexport const { inc, removeFromCart } = cartSlice.actions\r\n\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCart = (state: any) => state.cart.cart\r\n\r\nexport default cartSlice.reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,SAAS,GAAGD,WAAW,CAAC;EACnCE,IAAI,EAAE,MAD6B;EAEnCC,YAAY,EAAE;IACZC,IAAI,EAAE;EADM,CAFqB;EAKnCC,QAAQ,EAAE;IACRC,GAAG,EAAGC,KAAD,IAAW;MACd;MACA;MACA;MACA;MACAA,KAAK,CAACH,IAAN,IAAc,CAAd;IACD,CAPO;IAQRI,cAAc,EAAGD,KAAD,IAAW;MACzBA,KAAK,CAACH,IAAN,IAAc,CAAd;IACD;EAVO;AALyB,CAAD,CAA7B;AAmBP,OAAO,MAAM;EAAEE,GAAF;EAAOE;AAAP,IAA0BP,SAAS,CAACQ,OAA1C,C,CAGP;AACA;AACA;;AACA,OAAO,MAAMC,UAAU,GAAIH,KAAD,IAAgBA,KAAK,CAACH,IAAN,CAAWA,IAA9C;AAEP,eAAeH,SAAS,CAACU,OAAzB"},"metadata":{},"sourceType":"module"}