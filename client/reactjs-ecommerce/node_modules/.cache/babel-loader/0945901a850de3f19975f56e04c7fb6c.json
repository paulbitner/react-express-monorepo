{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";var cartArray=localStorage.getItem(\"cart\");var cartObj=[];if(cartArray){cartObj=JSON.parse(cartArray);}console.log(cartArray);var initialState={//cart: [{\"variantID\":2285,\"variantImage\":\"https://cdn.shopify.com/s/files/1/0934/5378/products/Sc10_12Pack_Gum_Peppermint_GR_122721_resized.png?v=1648246451\",\"variantName\":\"Peppermint - Twelve Pack (108 pcs)\",\"variantPrice\":\"48\",\"quantity\":1},{\"variantID\":2284,\"variantImage\":\"https://cdn.shopify.com/s/files/1/0934/5378/products/Sc06_SixPack_GUM_Peppermint_GR_122821_resized.png?v=1651353142\",\"variantName\":\"Peppermint - Six Pack (54 pcs)\",\"variantPrice\":\"24\",\"quantity\":2}],\ncart:cartObj};export var cartSlice=createSlice({name:\"cart\",initialState:initialState,reducers:{addProductToCart:function addProductToCart(state,productVariant){var variantID=productVariant.payload.variantID;//checks if the variant is already in the cart. If so, increase quantity by 1.\nvar existsInCart=state.cart.some(function(v){return v.variantID===variantID;});if(existsInCart){var thisidex=state.cart.findIndex(function(emp){return emp.variantID===variantID;});console.log(thisidex);var val=state.cart[thisidex].quantity;if(typeof val!==\"undefined\"){state.cart[thisidex].quantity=val+1;}}else{state.cart.push(productVariant.payload);}console.log(state.cart);},updateQuantity:function updateQuantity(state,data){var _data$payload=data.payload,variantID=_data$payload.variantID,action=_data$payload.action;var existsInCart=state.cart.some(function(v){return v.variantID===variantID;});if(existsInCart){var thisidex=state.cart.findIndex(function(index){return index.variantID===variantID;});var val=state.cart[thisidex].quantity;if(typeof val!==\"undefined\"){if(action==='increment'){state.cart[thisidex].quantity=val+1;}else if(action==='decrement'){if(val-1===0){state.cart.splice(thisidex,1);}else{state.cart[thisidex].quantity=val-1;}}}}}}});var _cartSlice$actions=cartSlice.actions,addProductToCart=_cartSlice$actions.addProductToCart,updateQuantity=_cartSlice$actions.updateQuantity;// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\nexport{addProductToCart,updateQuantity};export var selectCart=function selectCart(state){return state.cart.cart;};export default cartSlice.reducer;","map":{"version":3,"names":["createSlice","cartArray","localStorage","getItem","cartObj","JSON","parse","console","log","initialState","cart","cartSlice","name","reducers","addProductToCart","state","productVariant","variantID","payload","existsInCart","some","v","thisidex","findIndex","emp","val","quantity","push","updateQuantity","data","action","index","splice","actions","selectCart","reducer"],"sources":["C:/Users/pbitn/Desktop/learning/React/reactjs-ecommerce/src/stores/cartSlice.ts"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { Variant } from \"features/SingleProduct/types\";\r\n\r\nlet cartArray = localStorage.getItem(\"cart\");\r\n\r\nlet cartObj: Array<Variant> = [];\r\n\r\nif(cartArray){\r\n  cartObj = JSON.parse(cartArray);\r\n}\r\n\r\nconsole.log(cartArray);\r\n\r\ntype initialSliceState = { cart: Array<Variant> };\r\nconst initialState: initialSliceState = {\r\n  //cart: [{\"variantID\":2285,\"variantImage\":\"https://cdn.shopify.com/s/files/1/0934/5378/products/Sc10_12Pack_Gum_Peppermint_GR_122721_resized.png?v=1648246451\",\"variantName\":\"Peppermint - Twelve Pack (108 pcs)\",\"variantPrice\":\"48\",\"quantity\":1},{\"variantID\":2284,\"variantImage\":\"https://cdn.shopify.com/s/files/1/0934/5378/products/Sc06_SixPack_GUM_Peppermint_GR_122821_resized.png?v=1651353142\",\"variantName\":\"Peppermint - Six Pack (54 pcs)\",\"variantPrice\":\"24\",\"quantity\":2}],\r\n  cart: cartObj,\r\n};\r\n\r\nexport const cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState,\r\n  reducers: {\r\n    addProductToCart: (state, productVariant) => {\r\n      const { variantID } = productVariant.payload;\r\n\r\n      //checks if the variant is already in the cart. If so, increase quantity by 1.\r\n      const existsInCart = state.cart.some((v) => v.variantID === variantID);\r\n\r\n      if (existsInCart) {\r\n        const thisidex = state.cart.findIndex(\r\n          (emp) => emp.variantID === variantID\r\n        );\r\n\r\n        console.log(thisidex);\r\n        const val = state.cart[thisidex].quantity;\r\n        if (typeof val !== \"undefined\") {\r\n          state.cart[thisidex].quantity = val + 1;\r\n        }\r\n      } else {\r\n        state.cart.push(productVariant.payload);\r\n      }\r\n\r\n      console.log(state.cart)\r\n    },\r\n    updateQuantity: (state, data) => {\r\n      const { variantID, action } = data.payload;\r\n      const existsInCart = state.cart.some((v) => v.variantID === variantID);\r\n      if (existsInCart) {\r\n        const thisidex = state.cart.findIndex(\r\n          (index) => index.variantID === variantID\r\n        );\r\n\r\n        const val = state.cart[thisidex].quantity;\r\n        if (typeof val !== \"undefined\")  {\r\n          if(action === 'increment'){\r\n            state.cart[thisidex].quantity = val + 1;\r\n          } else if(action === 'decrement'){\r\n            if(val - 1 === 0){\r\n              state.cart.splice(thisidex, 1);\r\n            } else{\r\n                state.cart[thisidex].quantity = val - 1;\r\n            }\r\n            \r\n          }\r\n          \r\n        }\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addProductToCart, updateQuantity } = cartSlice.actions;\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state) => state.counter.value)`\r\nexport const selectCart = (state: any) => state.cart.cart;\r\n\r\nexport default cartSlice.reducer;\r\n"],"mappings":"AAAA,OAASA,WAAT,KAA4B,kBAA5B,CAGA,GAAIC,UAAS,CAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAhB,CAEA,GAAIC,QAAuB,CAAG,EAA9B,CAEA,GAAGH,SAAH,CAAa,CACXG,OAAO,CAAGC,IAAI,CAACC,KAAL,CAAWL,SAAX,CAAV,CACD,CAEDM,OAAO,CAACC,GAAR,CAAYP,SAAZ,EAGA,GAAMQ,aAA+B,CAAG,CACtC;AACAC,IAAI,CAAEN,OAFgC,CAAxC,CAKA,MAAO,IAAMO,UAAS,CAAGX,WAAW,CAAC,CACnCY,IAAI,CAAE,MAD6B,CAEnCH,YAAY,CAAZA,YAFmC,CAGnCI,QAAQ,CAAE,CACRC,gBAAgB,CAAE,0BAACC,KAAD,CAAQC,cAAR,CAA2B,CAC3C,GAAQC,UAAR,CAAsBD,cAAc,CAACE,OAArC,CAAQD,SAAR,CAEA;AACA,GAAME,aAAY,CAAGJ,KAAK,CAACL,IAAN,CAAWU,IAAX,CAAgB,SAACC,CAAD,QAAOA,EAAC,CAACJ,SAAF,GAAgBA,SAAvB,EAAhB,CAArB,CAEA,GAAIE,YAAJ,CAAkB,CAChB,GAAMG,SAAQ,CAAGP,KAAK,CAACL,IAAN,CAAWa,SAAX,CACf,SAACC,GAAD,QAASA,IAAG,CAACP,SAAJ,GAAkBA,SAA3B,EADe,CAAjB,CAIAV,OAAO,CAACC,GAAR,CAAYc,QAAZ,EACA,GAAMG,IAAG,CAAGV,KAAK,CAACL,IAAN,CAAWY,QAAX,EAAqBI,QAAjC,CACA,GAAI,MAAOD,IAAP,GAAe,WAAnB,CAAgC,CAC9BV,KAAK,CAACL,IAAN,CAAWY,QAAX,EAAqBI,QAArB,CAAgCD,GAAG,CAAG,CAAtC,CACD,CACF,CAVD,IAUO,CACLV,KAAK,CAACL,IAAN,CAAWiB,IAAX,CAAgBX,cAAc,CAACE,OAA/B,EACD,CAEDX,OAAO,CAACC,GAAR,CAAYO,KAAK,CAACL,IAAlB,EACD,CAtBO,CAuBRkB,cAAc,CAAE,wBAACb,KAAD,CAAQc,IAAR,CAAiB,CAC/B,kBAA8BA,IAAI,CAACX,OAAnC,CAAQD,SAAR,eAAQA,SAAR,CAAmBa,MAAnB,eAAmBA,MAAnB,CACA,GAAMX,aAAY,CAAGJ,KAAK,CAACL,IAAN,CAAWU,IAAX,CAAgB,SAACC,CAAD,QAAOA,EAAC,CAACJ,SAAF,GAAgBA,SAAvB,EAAhB,CAArB,CACA,GAAIE,YAAJ,CAAkB,CAChB,GAAMG,SAAQ,CAAGP,KAAK,CAACL,IAAN,CAAWa,SAAX,CACf,SAACQ,KAAD,QAAWA,MAAK,CAACd,SAAN,GAAoBA,SAA/B,EADe,CAAjB,CAIA,GAAMQ,IAAG,CAAGV,KAAK,CAACL,IAAN,CAAWY,QAAX,EAAqBI,QAAjC,CACA,GAAI,MAAOD,IAAP,GAAe,WAAnB,CAAiC,CAC/B,GAAGK,MAAM,GAAK,WAAd,CAA0B,CACxBf,KAAK,CAACL,IAAN,CAAWY,QAAX,EAAqBI,QAArB,CAAgCD,GAAG,CAAG,CAAtC,CACD,CAFD,IAEO,IAAGK,MAAM,GAAK,WAAd,CAA0B,CAC/B,GAAGL,GAAG,CAAG,CAAN,GAAY,CAAf,CAAiB,CACfV,KAAK,CAACL,IAAN,CAAWsB,MAAX,CAAkBV,QAAlB,CAA4B,CAA5B,EACD,CAFD,IAEM,CACFP,KAAK,CAACL,IAAN,CAAWY,QAAX,EAAqBI,QAArB,CAAgCD,GAAG,CAAG,CAAtC,CACH,CAEF,CAEF,CACF,CACF,CA9CO,CAHyB,CAAD,CAA7B,CAqDA,uBAA6Cd,SAAS,CAACsB,OAAvD,CAAQnB,gBAAR,oBAAQA,gBAAR,CAA0Bc,cAA1B,oBAA0BA,cAA1B,CAEP;AACA;AACA;wCACA,MAAO,IAAMM,WAAU,CAAG,QAAbA,WAAa,CAACnB,KAAD,QAAgBA,MAAK,CAACL,IAAN,CAAWA,IAA3B,EAAnB,CAEP,cAAeC,UAAS,CAACwB,OAAzB"},"metadata":{},"sourceType":"module"}